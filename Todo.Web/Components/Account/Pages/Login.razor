@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Todo.Web.Auth
@using Todo.Web.Auth.Models
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@attribute [AllowAnonymous]

<PageTitle>Log in</PageTitle>

<div class="container">
    <h2>Log in</h2>
    <section>
        @if (errorMessage != "")
        {
            <p>@errorMessage</p>
        }
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password"/>
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
            <div class="checkbox mb-3">
                <label class="form-label" id="rememberMe">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input"/>
                    Remember me
                </label>
            </div>
            <div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                <h3>Or signup with</h3>
            </div>
            <div class="button-container">
                <!-- Google Button -->
                <button class="circular-button">
                    <img src="./Images/google.png" alt="Google Logo"/>
                </button>

                <!-- Facebook Button -->
                <button class="circular-button">
                    <img src="./Images/facebook_logo.svg" alt="Facebook Logo"/>
                </button>
            </div>
            <div>
                <p>
                    <a href="Account/ForgotPassword">Forgot your password?</a>
                </p>
                <p>
                    <a href="Account/Register">Register as a new user</a>
                </p>
                <p>
                    <a href="Account/RegisterConfirmation">Resend confirmation email</a>
                </p>
            </div>
        </EditForm>
    </section>
    @*</div>*@
    @*<div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr/>
            <ExternalLoginPicker/>
        </section>
    </div>*@
</div>

@code {
    private string errorMessage = "";
    private string successMessage = "";

    private bool isLoading;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task LoginUser()
    {
        try
        {
            if (isLoading) return;
            isLoading = true;
            errorMessage = "";
            successMessage = "";
            StateHasChanged();

            var isEmailConfirmed = await AuthService.IsEmailConfirmedAsync(Input.Email);
            if (!isEmailConfirmed)
            {
                errorMessage = "Please confirm your email address before logging in.";
                return;
            }

            var loginRequest = new LoginRequest
            {
                Email = Input.Email,
                Password = Input.Password
            };

            var isAuthenticated = await AuthService.LoginAsync(loginRequest);

            if (isAuthenticated)
            {
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                errorMessage = "Invalid login attempt. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while logging in. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

}
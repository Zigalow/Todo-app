@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Todo.Web.Auth
@using Todo.Web.Auth.Models

@inject IUserService UserService
@inject ILogger<ChangePassword> Logger
@inject NavigationManager NavigationManager

<PageTitle>Change password</PageTitle>

<h3>Change password</h3>
<StatusMessage Message="@message"/>
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password."/>
                <label for="old-password" class="form-label">Old password</label>
                <ValidationMessage For="() => Input.OldPassword" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password."/>
                <label for="new-password" class="form-label">New password</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password."/>
                <label for="confirm-password" class="form-label">Confirm password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private UserInfoRequest? user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetUserInfoAsync();
        hasPassword = await UserService.HasPasswordAsync();
        if (!hasPassword)
        {
            NavigationManager.NavigateTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.OldPassword == Input.NewPassword)
        {
            message = "Failed to change password";
            return;
        }

        if (Input.NewPassword != Input.ConfirmPassword)
        {
            message = "Failed to change password";
            return;
        }

        if (string.IsNullOrEmpty(Input.NewPassword) || string.IsNullOrEmpty(Input.OldPassword) || string.IsNullOrEmpty(Input.ConfirmPassword))
        {
            message = "Failed to change password";
            return;
        }

        if (string.IsNullOrWhiteSpace(Input.NewPassword) || string.IsNullOrWhiteSpace(Input.OldPassword) || string.IsNullOrWhiteSpace(Input.ConfirmPassword))
        {
            message = "Failed to change password";
            return;
        }
        
        var changePasswordResult = await UserService.ChangePasswordAsync(Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult)
        {
            
            message = "Failed to change password";
            return;
        }
        Console.WriteLine("Password changed successfully");
        
        Logger.LogInformation("User changed their password successfully.");
        message= "User changed their password successfully";
        //await Task.Delay(3000);
        //message = "";
        Input.OldPassword = "";
        Input.NewPassword = "";
        Input.ConfirmPassword = "";
        //NavigationManager.NavigateTo("/Account/Manage/ChangePassword");
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}
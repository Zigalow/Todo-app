@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Todo.Web.Auth
@using Todo.Web.Auth.Models

@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage/>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            @* Display status message *@
            @if (!string.IsNullOrEmpty(StatusMessage))
            {
            <div class="alert alert-info">@StatusMessage</div>
            }
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <input type="text" value="@_username" class="form-control" placeholder="Please choose your username." disabled/>
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number."/>
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private UserInfoResponse? _user = default!;
    private string? _username;
    private string? _phoneNumber;
    private string StatusMessage { get; set; } = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        //Get userinformation
        _user = await UserService.GetUserInfoAsync();
        if (_user != null)
        {
            _username = _user.Username;
            _phoneNumber = _user.PhoneNumber;
            Console.WriteLine("Phone number: " + _phoneNumber);
            // Set the current phone number in Input model
            Input.PhoneNumber ??= _phoneNumber;
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != _phoneNumber)
        {
            var updateSuccess = Input.PhoneNumber != null && await UserService.UpdatePhoneNumberAsync(Input.PhoneNumber);
            if (!updateSuccess)
            {
                StatusMessage = "Error: Failed to set phone number.";
                return;
            }

            // Refresh user information to get the updated phone number
            _user = await UserService.GetUserInfoAsync();
            if (_user != null)
            {
                _phoneNumber = _user.PhoneNumber;
            }
        }
        
        StatusMessage = "Your profile has been updated";
    }


    private sealed class InputModel
    {
        [Phone]
        [StringLength(12)]
        [MinLength(6)]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }

}
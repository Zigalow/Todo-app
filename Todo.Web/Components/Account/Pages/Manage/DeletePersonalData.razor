@page "/Account/Manage/DeletePersonalData"
@using System.ComponentModel.DataAnnotations
@using Todo.Web.Auth

@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Delete Personal Data</PageTitle>

<StatusMessage Message="@message"/>

<h3>Delete Personal Data</h3>

<div class="alert alert-warning" role="alert">
    <p>
        <strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
    </p>
</div>

<div>
    <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator/>
        <ValidationSummary class="text-danger" role="alert"/>
        @if (requirePassword)
        {
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your password."/>
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
        }
        <button class="w-100 btn btn-lg btn-danger" type="submit">Delete data and close my account</button>
    </EditForm>
</div>

@code {
    private string? message;
    private bool requirePassword;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        requirePassword = await UserService.HasPasswordAsync();
    }

    private async Task OnValidSubmitAsync()
    {
        var result = await UserService.DeleteAccountAsync(requirePassword ? Input.Password : null);
        
        if (!result)
        {
            message = "Error: Failed to delete account. Please check your password if provided.";
            return;
        }
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
           
        }

        NavigationManager.NavigateTo("/");
    }

    private sealed class InputModel
    {
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Todo.Core.Dtos.AuthDto
@using Todo.Core.Entities
@using Todo.Web.Auth
@using Todo.Web.Auth.Models

@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Manage email</PageTitle>

<h3>Manage email</h3>

<StatusMessage Message="@message"/>
<div class="row">
    <div class="col-md-6">
        @*<form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
            <AntiforgeryToken/>
        </form>*@
        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            @if (isEmailConfirmed)
            {
                <div class="form-floating mb-3 input-group">
                    <input type="text" value="@email" class="form-control" placeholder="Please enter your email." disabled/>
                    <div class="input-group-append">
                        <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
                    </div>
                    <label for="email" class="form-label">Email</label>
                </div>
            }
            else
            {
                <div class="form-floating mb-3">
                    <input type="text" value="@email" class="form-control" placeholder="Please enter your email." disabled/>
                    <label for="email" class="form-label">Email</label>
                    <button type="submit" class="btn btn-link" form="send-verification-form">Send verification email</button>
                </div>
            }
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Please enter new email."/>
                <label for="new-email" class="form-label">New email</label>
                <ValidationMessage For="() => Input.NewEmail" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Change email</button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private UserInfoResponse? user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetUserInfoAsync();
        //user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = user.Email;
        isEmailConfirmed = await UserService.IsEmailConfirmedAsync();

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email did not change.";
            return;
        }

        var userRequest = new UpdateEmailDto()
        {
            Email = Input.NewEmail
        };
        Console.WriteLine("NEW EMAIL: "  +Input.NewEmail);
        var updateSuccess = await UserService.UpdateEmailAsync(userRequest);
        if (!updateSuccess)
        {
            message = "Error: Failed to change email.";
            return;
        }
        
        user = await UserService.GetUserInfoAsync();
        if (user != null)
        {
            email = user.Email;
        }

        message = "Your email has been changed.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }

}
@using Todo.Core.Entities

<div class="relative">
    <button @onclick="ToggleDropdown" class="p-2 text-sm font-medium">
        Labels
    </button>

    @if (IsOpen)
    {
        <div class="absolute z-10 mt-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
            <div class="py-1">
                <div class="px-4 py-2 text-sm font-medium">
                    Manage Labels
                </div>
                <div class="border-t border-gray-100"></div>

                @foreach (var label in ExistingLabels)
                {
                    <button @onclick="() => OnAddLabel.InvokeAsync(label)"  
                            class="w-full text-left px-4 py-2 text-sm hover:bg-gray-100 flex items-center gap-2">
                        <div class="w-4 h-4 rounded-full" style="background-color: @label.Color"></div>
                        <span>@label.Name</span>
                    </button>
                }

                <div class="border-t border-gray-100"></div>
                <div class="p-4">
                    <input type="text" 
                           @bind="newLabelName" 
                           class="w-full mb-2 p-2 border rounded"
                           placeholder="Label name" />
                    
                    <input type="color" 
                           @bind="newLabelColor" 
                           class="w-full mb-2 p-1 border rounded" />
                    
                    <div class="flex justify-between gap-2">
                        <button @onclick="CloseLabelEditor" 
                                class="w-1/2 px-4 py-2 text-sm border rounded hover:bg-gray-100">
                            Cancel
                        </button>
                        <button @onclick="HandleAddLabel" 
                                class="w-1/2 px-4 py-2 text-sm bg-blue-500 text-white rounded hover:bg-blue-600 @(string.IsNullOrWhiteSpace(newLabelName) ? "opacity-50 cursor-not-allowed" : "")"
                                disabled="@string.IsNullOrWhiteSpace(newLabelName)">
                            Add Label
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback<Label> OnAddLabel { get; set; }

    [Parameter]
    public IEnumerable<Label> ExistingLabels { get; set; } = new List<Label>();

    private string newLabelName = "";
    private string newLabelColor = "#000000";

    private void ToggleDropdown()
    {
        IsOpen = !IsOpen;
    }

    private async Task HandleDropdownAction(string action)
    {
        switch (action)
        {
            case "new":
                IsOpen = false;
                break;
        }
    }

    private async Task HandleAddLabel()
    {
        if (!string.IsNullOrWhiteSpace(newLabelName))
        {
            var newLabel = new Label
            {
                Name = newLabelName,
                Color = newLabelColor
            };

            await OnAddLabel.InvokeAsync(newLabel);
            newLabelName = "";
            newLabelColor = "#000000";
            await OnClose.InvokeAsync();
        }
    }
    private async Task CloseLabelEditor()
    {
        await OnClose.InvokeAsync();
    }

    private bool IsColorPickerVisible { get; set; } = false;
private string SelectedColor { get; set; } = "#FFFFFF";  // Default color

private List<string> ColorOptions = new List<string>
{
    "#FF5733", "#33FF57", "#3357FF", "#F3FF33", "#FF33F3" // Example colors
};

private void ToggleColorPicker()
{
    IsColorPickerVisible = !IsColorPickerVisible;
}

private void SelectColor(string color)
{
    SelectedColor = color;
    IsColorPickerVisible = false; // Close color picker after selection
    // Here, you'd assign the color to the label in the CurrentTodoItem
    // e.g., CurrentTodoItem.LabelColor = SelectedColor;
}
}
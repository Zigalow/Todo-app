@page "/Account/Register"
@using System.ComponentModel.DataAnnotations
@using Todo.Web.Auth
@using Todo.Web.Auth.Models
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<PageTitle>Register</PageTitle>

<div class="container">
    <h2>Sign Up</h2>
    <div class="text-field">
        @if (Message != "")
        {
            <p>@Message</p>
        }
        <EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <p>Create a new account.</p>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.UserName" class="form-control" autocomplete="username" aria-required="true" placeholder="Ali Zaid" />
                <label for="text">Name</label>
                <ValidationMessage For="() => Input.UserName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <button type="submit" class="auth-button">Register</button>
        </EditForm>
    </div>
</div>
@code {
    private string? Message { get; set; }

    private InputModel Input { get; set; } = new();
    private RegisterRequest registerRequest = new();
    
    private async Task RegisterUser()
    {
        try
        {
            registerRequest.Username = Input.UserName;
            registerRequest.Email = Input.Email;
            registerRequest.Password = Input.Password;
            registerRequest.ConfirmPassword = Input.ConfirmPassword;

            var result = await AuthService.RegisterAsync(registerRequest);

            if (result.Succeeded)
            {
                Message = "Registration successful! Redirecting to login...";
                
                NavigationManager.NavigateTo("/Account/RegisterConfirmation");
            }
            else
            {
                Message = result.Error;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
       
    }
    
    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [Display(Name = "Name")]
        public string UserName { get; set; } = "";
    }

}
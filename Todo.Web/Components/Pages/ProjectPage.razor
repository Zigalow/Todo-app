@page "/project/{projectId:int}"
@using Todo.Core.Dtos.ProjectDtos
@using Todo.Core.Dtos.TodoItemDtos
@using Todo.Core.Dtos.TodoListDtos
@using Todo.Web.Services.interfaces

@inject IProjectService ProjectService
@inject ITodoListService TodoListService
@inject ITodoItemService TodoItemService

@rendermode InteractiveServer

@if (CurrentProject == null)
{
    <h1>No project found</h1>    
}
else
{
    <title>@CurrentProject.Name</title>

    <h1>@CurrentProject.Name</h1>

    <div class="todo-lists-container">
        @if (CurrentProject.TodoLists.Count != 0)
        {
            @foreach (var todoList in CurrentProject.TodoLists)
            {
                <div class="todo-list-container">

                    @if (todoList.TodoItems.Count != 0)
                    {
                        <div class="todo-list-title">
                            <h5>@todoList.Name</h5>
                            <img src="images/menu.png"/>
                        </div>
                        @foreach (var task in todoList.TodoItems)
                        {
                            <div class="task-container" @onclick="() => ViewTask = true">
                                <p>
                                    <span>@task.Title</span>
                                </p>
                                <p>Priority: @task.Priority</p>
                                @*@if(task. > 0){
                                    <p>Duration: @task.Duration</p>
                                }
                                @if(task.TimeStart!="" || task.TimeEnd!=""){
                                <p>Time: @task.TimeStart - @task.TimeEnd</p>
                                }*@
                                <div class="task-lower-part">
                                    <div class="todo-date">
                                        @*@if(task.StartDate == "" && task.EndDate != ""){
                                            <p>@task.EndDate</p>
                                        } else if (task.StartDate != "" && task.EndDate != "") {
                                            <p>@task.StartDate - @task.EndDate</p>
                                        }*@
                                    </div>
                                    <button @onclick="() => ModifiyTask(task)">Modifiy</button>
                                </div>
                            </div>
                        }
                    }
                    @if (IsAddingTask && CurrentListAddingTask == todoList)
                    {
                        <input type="text" @bind="TextValue" placeholder="Enter task name..."/>
                        <button @onclick="() => CreateTask(todoList)">Create Task</button>
                    }
                    else
                    {
                        <button @onclick="() => ShowInputField(todoList)">Add Task</button>
                    }
                </div>
            }
        }
        <div class="todo-list-container">
            <button>Create new List</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int ProjectId { get; set; }
    public required ProjectDto? CurrentProject { get; set; }

    private bool IsAddingTask { get; set; } = false;
    private TodoListDto CurrentListAddingTask { get; set; }
    private string TextValue = "";

    private bool ViewTask {get; set; } = false;

    //Shouldn't actually create a new project (fetch the given project)
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"ProjectId received: {ProjectId}");
        CurrentProject = await ProjectService.GetProjectByIdAsync(ProjectId);
    }

    private void ModifiyTask(TodoItemDto task) {
        Console.WriteLine("Modified Task Done");
    }

    private void ShowInputField(TodoListDto todoList){
        IsAddingTask = true;
        CurrentListAddingTask = todoList;
    }

    private void CreateTask(TodoListDto todoList){
        if (string.IsNullOrEmpty(TextValue))
        {
            return;
        }

        var createTodoItemDto = new CreateTodoItemDto();

        createTodoItemDto.Title = TextValue;
        /*createTodoItemDto.Description = "";
        createTodoItemDto.Priority = "";
        createTodoItemDto.DueDate = ;*/
        
        /*TODO: Add TodoItemsController*/
        
        /*todoList.Tasks.Add (
            new TodoTask {Name = TextValue, TimeStart="", TimeEnd="", StartDate="", EndDate="", Description=""}
        );*/
        TextValue = "";
        IsAddingTask = false;
        CurrentListAddingTask = null;
    }


}

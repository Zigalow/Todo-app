@page "/project/{projectId:int}"
@using Todo.Core.Dtos.LabelDto
@using Todo.Core.Dtos.ProjectDtos
@using Todo.Core.Dtos.TodoItemDtos
@using Todo.Core.Dtos.TodoListDtos
@using Todo.Web.Services.interfaces

@inject IProjectService ProjectService
@inject ITodoListService TodoListService
@inject ITodoItemService TodoItemService

@rendermode InteractiveServer

@if (CurrentProject == null)
{
    <h1>No project found</h1>    
}
else {
    <title>@CurrentProject.Name</title>

    <h1>@CurrentProject.Name</h1>
    
    @if (_showError) {
        <b class="error-message">
            @_errorMessage
        </b>
    }
    
    <div class="todo-lists-container">
        @if (CurrentProject.TodoLists.Count != 0) {
            @foreach (var todoList in CurrentProject.TodoLists) {
                <div class="todo-list-container">
                    <div class="todo-list-title">
                        <h5>@todoList.Name</h5>
                        <img src="images/menu.png"/>
                    </div>
                    @if (todoList.TodoItems.Count != 0) {
                        @foreach (var task in todoList.TodoItems) {
                            <div class="task-container" @onclick="() => ViewTask = true">
                                @if (task.HasLabel){
                                <div class="task-label" style="background-color: @task.LabelColor;">
                                    @task.LabelText
                                </div>
                                }
                                <p><span>@task.Title</span></p>
                                <p>Priority: @task.Priority</p>
                                
                                <div class="task-lower-part">
                                    <div class="todo-date">
                                        @if (task.DueDate.HasValue)
                                        {
                                            <span>Due: @task.DueDate.Value.ToShortDateString()</span>
                                        }
                                    </div>
                                    <div class="dropdown-container" @onclick:stopPropagation>
                                        <button class="modify-button" @onclick="() => HandleIsModifier(task)">
                                            Modify
                                        </button>

                                        @if (CurrentTodoItem == task)
                                        {
                                            <div class="modifiymenu">
                                                <button>Open card</button>
                                                <button @onclick="() => ToggleLabelEditor(task)">
                                                    Edit label
                                                </button>
                                                <button>Add date</button>
                                                <button>Move</button>
                                                <button>Copy</button>
                                            </div>

                                            @if (IsHandleLabel) {
                                                <div class="label-editor">
                                                    <h5>Labels</h5>
                                                    @if (ProjectLabels.Any()) {
                                                        <div class="saved-labels">
                                                            <h6>Project Labels</h6>
                                                            @foreach (var label in ProjectLabels)
                                                            {
                                                                <div class="saved-label-item"
                                                                     @onclick="() => ApplyExistingLabel(task, label)"
                                                                     style="background-color: @label.Color">
                                                                    @label.Name
                                                                    <span class="label-count">(@label.TodoCount)</span>

                                                                    @if (task.LabelText == label.Name)
                                                                    {
                                                                        <button class="remove-label" @onclick:stopPropagation="true"
                                                                                @onclick="() => RemoveLabel(task, label)">Ã—</button>

                                                                        <button class="delete-label" @onclick:stopPropagation="true"
                                                                                @onclick="() => DeleteLabel(label)">Delete</button>
                                                                    }
                                                                </div>
                                                            }
                                                        </div>
                                                    }

                                                    <div class="create-label-section">
                                                        <h6>Create New Label</h6>
                                                        <input type="text" @bind="_newTodoItemName" placeholder="Enter label name..." />
                                                        <div class="color-picker">
                                                            @foreach (var color in ColorOptions)
                                                            {
                                                                <div class="color-option @(SelectedColor == color ? "selected" : "")"
                                                                     style="background-color: @color"
                                                                     @onclick="() => SelectColor(color)">
                                                                </div>
                                                            }
                                                        </div>
                                                        <button @onclick="() => CreateLabel(task)" class="create-label-button">
                                                            Create New Label
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    @if (IsAddingTask && CurrentListAddingTask == todoList) {
                        <input type="text" @bind="_newTodoItemName" placeholder="Enter task name..."/>
                        <button @onclick="() => CreateTask(todoList)">Create Task</button>
                        <img class="x-icon" src="images/x-icon.png" alt="" @onclick="() => {IsAddingTask = !IsAddingTask;}"/>
                    }
                    else {
                        <button @onclick="() => ShowInputField(todoList)">Add Task</button>
                    }
                </div>
            }
        }
        @if (IsAddingTodoList)
        {
            <input type="text" @bind="_newTodoListName" placeholder="Enter Todolist name..."/>
        }
        
        <div class="todo-list-container">
            <button @onclick="CreateTodoListAsync">Create new List</button>
            @if (IsAddingTodoList)
            {
                <img class="x-icon" src="images/x-icon.png" alt="" @onclick="() => {IsAddingTodoList = !IsAddingTodoList;}"/>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int ProjectId { get; set; }
    public required ProjectDto? CurrentProject { get; set; }
    private List<LabelDto> ProjectLabels { get; set; } = new();
    private string SelectedColor { get; set; } = "#4A90E2";
    private bool IsColorPickerVisible { get; set; } = false;
    private bool IsLabelVisible { get; set; } = false;
    
    private List<string> ColorOptions = new()
    {
        "#4A90E2",  // Blue
        "#50C878",  // Green
        "#FF6B6B",  // Red
        "#FFD93D",  // Yellow
        "#8A2BE2",  // Purple
        "#FF5733",  // Orange
        "#33FFBD",  // Mint Green
        "#FF33F6",  // Pink
        "#33D4FF",  // Light Blue
        "#FFC300",  // Gold
        "#FF7F50",  // Coral
        "#6A5ACD",  // Slate Blue
        "#20B2AA",  // Light Sea Green
        "#D2691E"   // Chocolate
    };
    
    private bool IsHandleLabel { get; set; } = false;
    private bool IsAddingTask { get; set; } = false;
    private TodoListDto CurrentListAddingTask { get; set; }
    private TodoItemDto CurrentTodoItem { get; set; }
    private string _newTodoItemName = "";
    private bool ViewTask {get; set; } = false;
    
    private bool IsAddingTodoList { get; set; }
    private string _newTodoListName = "";
    
    private bool _showError = false;
    private string _errorMessage = "";
    
    
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"ProjectId received: {ProjectId}");
        CurrentProject = await ProjectService.GetProjectByIdAsync(ProjectId);
        
        // Count existing labels
        foreach (var list in CurrentProject.TodoLists)
        {
            foreach (var item in list.TodoItems)
            {
                if (item.HasLabel)
                {
                    var label = ProjectLabels.FirstOrDefault(l => l.Name == item.LabelText);
                    if (label != null)
                    {
                        label.TodoCount++;
                    }
                }
            }
        }
    }

    private void ShowInputField(TodoListDto todoList){
        IsAddingTask = true;
        CurrentListAddingTask = todoList;
    }

    private async Task CreateTask(TodoListDto todoList){
        if (string.IsNullOrEmpty(_newTodoItemName))
        {
            await ShowErrorMessage("Failed to create TodoItem. Please try again.");
            return;
        }

        var createTodoItemDto = new CreateTodoItemDto
        {
            Title = _newTodoItemName
        };

        var isCreated = await TodoItemService.CreateTodoItemAsync(todoList.Id, createTodoItemDto);
        if (isCreated)
        {
            Console.WriteLine($"Created {_newTodoItemName} TodoItem");
            CurrentProject = await ProjectService.GetProjectByIdAsync(ProjectId);
        }
        else
        {
            Console.WriteLine("Failed to create TodoItem");
            await ShowErrorMessage("Failed to create TodoItem. Please try again.");
        }
        
        _newTodoItemName = "";
        IsAddingTask = false;
    }
    

    private async Task CreateTodoListAsync()
    {
        if (!IsAddingTodoList)
        {
            IsAddingTodoList = true;
            return;
        }
        //IsAddingTodoList = !IsAddingTodoList;
        if (string.IsNullOrEmpty(_newTodoListName) || string.IsNullOrWhiteSpace(_newTodoListName))
        {
            await ShowErrorMessage("Failed to create TodoList. Please try again.");
            //IsAddingTodoList = false;
            return;
        }
        var createTodoListDto = new CreateTodoListDto()
        {
            Name = _newTodoListName
        };
        
        var isCreated = await TodoListService.CreateTodoListAsync(ProjectId, createTodoListDto);
        if (isCreated)
        {
            Console.WriteLine($"Created {_newTodoListName} TodoList");
            CurrentProject = await ProjectService.GetProjectByIdAsync(ProjectId);
        }
        else
        {
            Console.WriteLine("Failed to create TodoList");
            await ShowErrorMessage("Failed to create TodoList. Please try again.");
        }

        _newTodoListName = "";
        IsAddingTodoList = false;
    }
    
    private async Task ShowErrorMessage(string message)
    {
        _errorMessage = message;
        _showError = true;
        
        await Task.Delay(1000);
        
        _errorMessage = "";
        _showError = false;
    }
    
    private void HandleIsModifier(TodoItemDto todoItem)
    {
        CurrentTodoItem = CurrentTodoItem == todoItem ? null : todoItem;
    }

    private void ToggleLabelEditor(TodoItemDto todoItem)
    {
        IsHandleLabel = !IsHandleLabel;
    }

    private void SelectColor(string color)
    {
        SelectedColor = color;
        StateHasChanged();
    }
    
    private async Task CreateLabel(TodoItemDto todoItem)
    {
        if (!string.IsNullOrWhiteSpace(_newTodoItemName) && !string.IsNullOrWhiteSpace(SelectedColor))
        {
            // Check if label already exists
            if (ProjectLabels.Any(l => l.Name.Equals(_newTodoItemName, StringComparison.OrdinalIgnoreCase)))
            {
                // Could add error message here
                return;
            }

            var newLabel = new LabelDto
            {
                Name = _newTodoItemName,
                Color = SelectedColor,
                ProjectId = ProjectId,
                TodoCount = 0,
                Id = ProjectLabels.Count + 1 // Temporary ID generation
            };
            
            ProjectLabels.Add(newLabel);
            await ApplyExistingLabel(todoItem, newLabel);
            
            _newTodoItemName = "";
            SelectedColor = "4A90E2";
        }
    }
    
    private void DeleteLabel(LabelDto label) {
        ProjectLabels.Remove(label);

        // Remove the label from any tasks that have it assigned
        foreach (var list in CurrentProject.TodoLists)
        {
            foreach (var task in list.TodoItems)
            {
                if (task.LabelText == label.Name)
                {
                    task.HasLabel = false;
                    task.LabelText = null;
                    task.LabelColor = "#FFFFFF"; // reset color
                }
            }
        }

        StateHasChanged();
    }
    
    private async Task RemoveLabel(TodoItemDto todoItem, LabelDto label)
    {
        todoItem.HasLabel = false;
        todoItem.LabelText = null;
        todoItem.LabelColor = "#FFFFFF";
        todoItem.Labels.Remove(label.Name);
        
        label.TodoCount--;
        
        StateHasChanged();
    }
    
    private async Task ApplyExistingLabel(TodoItemDto todoItem, LabelDto label)
    {
        // Remove old label if exists
        if (todoItem.HasLabel)
        {
            var oldLabel = ProjectLabels.FirstOrDefault(l => l.Name == todoItem.LabelText);
            if (oldLabel != null)
            {
                oldLabel.TodoCount--;
            }
        }

        // Apply new label
        todoItem.LabelText = label.Name;
        todoItem.LabelColor = "#" + label.Color;
        todoItem.HasLabel = true;
        
        if (!todoItem.Labels.Contains(label.Name))
        {
            todoItem.Labels.Add(label.Name);
            label.TodoCount++;
        }
        
        todoItem.IsLabelEditorVisible = false;
        StateHasChanged();
    }
}
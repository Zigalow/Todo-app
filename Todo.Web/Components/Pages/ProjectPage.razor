@page "/project/{projectId:int}"
@using Microsoft.IdentityModel.Tokens
@using Todo.Api.Dtos.ProjectDtos
@using Todo.Api.Dtos.TodoItemDtos
@using Todo.Api.Dtos.TodoListDtos
@rendermode InteractiveServer


<title>@CurrentProject.Name</title>

<h1>@CurrentProject.Name</h1>

<div class="todo-lists-container">
    @if(!CurrentProject.TodoLists.IsNullOrEmpty()){
        @foreach (var todoList in CurrentProject.TodoLists)
        {
            <div class="todo-list-container">

                <div class="todo-list-title">
                    <h5>@todoList.Name</h5>
                    <img src="images/menu.png"/>
                </div>

                @if(!todoList.TodoItems.IsNullOrEmpty()){  
                        @foreach (var task in todoList.TodoItems)
                        {
                            <div class = "task-container" @onclick="() => ViewTask=true">
                                <p><span>@task.Title</span></p>
                                <p>Priority: @task.Priority</p>
                                @*@if(task. > 0){
                                    <p>Duration: @task.Duration</p>
                                }
                                @if(task.TimeStart!="" || task.TimeEnd!=""){
                                <p>Time: @task.TimeStart - @task.TimeEnd</p>
                                }*@
                                <div class="task-lower-part">
                                    <div class = "todo-date">
                                        @*@if(task.StartDate == "" && task.EndDate != ""){
                                            <p>@task.EndDate</p>
                                        } else if (task.StartDate != "" && task.EndDate != "") {
                                            <p>@task.StartDate - @task.EndDate</p>
                                        }*@
                                    </div>
                                    <button @onclick="() => ModifiyTask(task)">Modifiy</button>
                                </div>
                            </div>
                        }
                }
                @if (IsAddingTask && CurrentListAddingTask == todoList)
                {
                    <input type="text" @bind="TextValue" placeholder="Enter task name..." />
                    <button @onclick="() => CreateTask(todoList)">Create Task</button>
                }
                else
                {
                    <button @onclick="() => ShowInputField(todoList)">Add Task</button>
                }
            </div>
        }
    }
    <div class="todo-list-container">
        <button>Create new List</button>
    </div>
</div>

@code {
    [Parameter]
    public int ProjectId { get; set; }
    public required ProjectDto CurrentProject { get; set; }

    private bool IsAddingTask { get; set; } = false;
    private TodoListDto CurrentListAddingTask { get; set; }
    private string TextValue = "";

    private bool ViewTask {get; set; } = false;

    //hardcoded TODO List
    private List<TodoItemDto> hobbyTasks = new List<TodoItemDto>{
        new () { Title = "Play football with friends"/*,  = 90,  ="5:15 AM", TimeEnd="6:45 AM", StartDate="30-09-24",*/, DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false},
        new TodoItemDto { Title = "\"Watch one piece", DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false},
        new TodoItemDto { Title = "\"Watch one piece", DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false}, 
    };

    //Shouldn't actually create a new project (fetch the given project)
    protected override void OnInitialized() {
        CurrentProject = new ProjectDto()
        {
            Id = ProjectId,
            Name = "Default-Project",
            TodoLists = new List<TodoListDto>
            {
                new()
                {
                    Name = "Hobby",
                    TodoItems = hobbyTasks
                },
                new ()
                {
                    Name = "School",
                    TodoItems = new List<TodoItemDto>
                    {
                        new TodoItemDto { Title = "Watch one piece", DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false}, 
                    }
                },
                new ()
                {
                    Name = "Reading",
                    TodoItems = new List<TodoItemDto>
                    {
                        new() { Title = "Watch one piece", DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false}, 
                    }
                }
            }
        };
    }

    private void ModifiyTask(TodoItemDto task) {
        Console.WriteLine("Modified Task Done");
    }

    private void ShowInputField(TodoListDto todoList){
        IsAddingTask = true;
        CurrentListAddingTask = todoList;
    }

    private void CreateTask(TodoListDto todoList){
        if (string.IsNullOrEmpty(TextValue))
        {
            return;
        }

        var createTodoItemDto = new CreateTodoItemDto();

        createTodoItemDto.Title = TextValue;
        /*createTodoItemDto.Description = "";
        createTodoItemDto.Priority = "";
        createTodoItemDto.DueDate = ;*/
        
        /*TODO: Add TodoItemsController*/
        
        /*todoList.Tasks.Add (
            new TodoTask {Name = TextValue, TimeStart="", TimeEnd="", StartDate="", EndDate="", Description=""}
        );*/
        TextValue = "";
        IsAddingTask = false;
        CurrentListAddingTask = null;
    }


}

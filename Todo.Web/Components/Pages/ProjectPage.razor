@page "/project/{projectId:int}"
@using Microsoft.IdentityModel.Tokens
@using Todo.Api.Dtos.ProjectDtos
@using Todo.Api.Dtos.TodoItemDtos
@using Todo.Api.Dtos.TodoListDtos
@rendermode InteractiveServer

<title>@CurrentProject.Name</title>

<h1>@CurrentProject.Name</h1>

<div class="todo-lists-container">
    @if(!CurrentProject.TodoLists.IsNullOrEmpty()){
        @foreach (var todoList in CurrentProject.TodoLists)
        {
            <div class="todo-list-container">
                <div class="todo-list-title">
                    <h5>@todoList.Name</h5>
                    <img src="images/menu.png"/>
                </div>

                @if(!todoList.TodoItems.IsNullOrEmpty()){  
                    @foreach (var task in todoList.TodoItems)
                    {
                        <div class="task-container" @onclick="() => ViewTask=true">
                            <p><span>@task.Title</span></p>
                            <p>Priority: @task.Priority</p>
                            <div class="task-lower-part">
                                <div class="todo-date">
                                </div>
                                <div class="dropdown-container" @onclick:stopPropagation>

                                    <button class="modify-button" @onclick="() => HandleIsModifiyer(task)">
                                        Modify
                                    </button>

                                    @if (CurrentTodoItem == task)
                                    {
                                        <div class="modifiymenu">
                                            <button>Open card</button>
                                            <button @onclick="() => ToggleLabelEditor(task)">
                                                Edit label
                                            </button>
                                            <button>Add date</button>
                                            <button>Move</button>
                                            <button>Copy</button>
                                        </div>

                                        @if (IsHandleLabel)
                                        {
                                        <div class="label-editor">
                                            <h5>Title</h5>
                                            <input type="text" @bind="TextValue" placeholder="Enter label name..." />
                                            
                                            <div class="color-picker">
                                                @foreach (var color in ColorOptions)
                                                {
                                                    <div 
                                                        class="color-option @(SelectedColor == color ? "selected" : "")"
                                                        style="background-color: @color"
                                                        @onclick="() => SelectColor(color)">
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        }
                                    }

                                    @if (task.IsLabelEditorVisible)
                                    {
                                        <div class="label-editor">
                                            <h5>Title</h5>
                                            <input type="text" @bind="TextValue" placeholder="Enter label name..." />
                                            <div class="color-picker">
                                           
                                                @foreach (var color in ColorOptions)
                                                {
                                                    <div 
                                                        class="color-option @(SelectedColor == color ? "selected" : "")"
                                                        style="background-color: @color"
                                                        @onclick="() => SelectColor(color)">
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
            
                                </div>
                            </div>
                        </div>
                    }
                }
                @if (IsAddingTask && CurrentListAddingTask == todoList)
                {
                    <input type="text" @bind="TextValue" placeholder="Enter task name..." />
                    <button @onclick="() => CreateTask(todoList)">Create Task</button>
                }
                else
                {
                    <button @onclick="() => ShowInputField(todoList)">Add Task</button>
                }
            </div>
        }
    }
    <div class="todo-list-container">
        <button>Create new List</button>
    </div>
</div>

@code {
    [Parameter]
    public int ProjectId { get; set; }
    public required ProjectDto CurrentProject { get; set; }
    private bool IsColorPickerVisible { get; set; } = false;
    private string SelectedColor { get; set; } = "#4A90E2";  // Default color

    // Define color options
    private List<string> ColorOptions = new()
    {
        "#4A90E2",  // Blue
        "#50C878",  // Green
        "#FF6B6B",  // Red
        "#FFD93D",  // Yellow
        "#8A2BE2"   // Purple
    };

    private bool IsHandleLabel { get; set; } = false;
    private bool IsAddingTask { get; set; } = false;
    private bool IsModifiyingOpen { get; set; } = false;
    private TodoListDto CurrentListAddingTask { get; set; }
    private TodoItemDto CurrentTodoItem { get; set; }
    private string TextValue = "";

    private bool ViewTask {get; set; } = false;

    //hardcoded TODO List
    private List<TodoItemDto> hobbyTasks = new List<TodoItemDto>{
        new () { Title = "Play football with friends", DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false},
        new TodoItemDto { Title = "Watch one piece", DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false},
        new TodoItemDto { Title = "Watch one piece", DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false}, 
    };

    protected override void OnInitialized() {
        CurrentProject = new ProjectDto()
        {
            Id = ProjectId,
            Name = "Default-Project",
            TodoLists = new List<TodoListDto>
            {
                new()
                {
                    Name = "Hobby",
                    TodoItems = hobbyTasks
                },
                new ()
                {
                    Name = "School",
                    TodoItems = new List<TodoItemDto>
                    {
                        new TodoItemDto { Title = "Watch one piece", DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false}, 
                    }
                },
                new ()
                {
                    Name = "Reading",
                    TodoItems = new List<TodoItemDto>
                    {
                        new() { Title = "Watch one piece", DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false}, 
                    }
                }
            }
        };
    }

    private void ShowInputField(TodoListDto todoList){
        IsAddingTask = true;
        CurrentListAddingTask = todoList;
    }

    private void CreateTask(TodoListDto todoList){
        if (string.IsNullOrEmpty(TextValue))
        {
            return;
        }

        var createTodoItemDto = new CreateTodoItemDto();
        createTodoItemDto.Title = TextValue;
        
        TextValue = "";
        IsAddingTask = false;
        CurrentListAddingTask = null;
    }

    private void HandleIsModifiyer(TodoItemDto todoItem){
       CurrentTodoItem = CurrentTodoItem == todoItem ? null : todoItem;
    }

    private void HandleLabel(TodoItemDto todoItem){
        IsModifiyingOpen = !IsModifiyingOpen;

       if(CurrentTodoItem == null){
            CurrentTodoItem = todoItem;
       } else {
            CurrentTodoItem = null;
       }
    }

    private void ToggleLabelEditor(TodoItemDto todoItem){
        todoItem.IsLabelEditorVisible = !todoItem.IsLabelEditorVisible;
    }

    private void SelectColor(string color){
        SelectedColor = color;
        if (CurrentTodoItem != null) {
            CurrentTodoItem.LabelColor = color;
            StateHasChanged();
        }
    }
}
@page "/project/{projectId:int}"
@using Microsoft.IdentityModel.Tokens
@using Todo.Api.Dtos.ProjectDtos
@using Todo.Api.Dtos.TodoItemDtos
@using Todo.Api.Dtos.TodoListDtos
@using Todo.Api.Dtos.LabelDto
@rendermode InteractiveServer

<title>@CurrentProject.Name</title>

<h1>@CurrentProject.Name</h1>

<div class="todo-lists-container">
    @if(!CurrentProject.TodoLists.IsNullOrEmpty()){
        @foreach (var todoList in CurrentProject.TodoLists)
        {
            <div class="todo-list-container">
                <div class="todo-list-title">
                    <h5>@todoList.Name</h5>
                    <img src="images/menu.png"/>
                </div>

                @if(!todoList.TodoItems.IsNullOrEmpty()){  
                    @foreach (var task in todoList.TodoItems)
                    {
                        <div class="task-container" @onclick="() => ViewTask=true">
                            @if (task.HasLabel){
                                <div class="task-label" style="background-color: @task.LabelColor;">
                                    @task.LabelText
                                </div>
                            }
                            
                            <p><span>@task.Title</span></p>
                            <p>Priority: @task.Priority</p>
                            <div class="task-lower-part">
                                <div class="todo-date">
                                    @if (task.DueDate.HasValue)
                                    {
                                        <span>Due: @task.DueDate.Value.ToShortDateString()</span>
                                    }
                                </div>
                                <div class="dropdown-container" @onclick:stopPropagation>
                                    <button class="modify-button" @onclick="() => HandleIsModifiyer(task)">
                                        Modify
                                    </button>

                                    @if (CurrentTodoItem == task)
                                    {
                                        <div class="modifiymenu">
                                            <button>Open card</button>
                                            <button @onclick="() => ToggleLabelEditor(task)">
                                                Edit label
                                            </button>
                                            <button>Add date</button>
                                            <button>Move</button>
                                            <button>Copy</button>
                                        </div>

                                        @if (IsHandleLabel)
                                        {
                                            <div class="label-editor">
                                                <h5>Labels</h5>
                                                @if (ProjectLabels.Any())
                                                {
                                                    <div class="saved-labels">
                                                        <h6>Project Labels</h6>
                                                        @foreach (var label in ProjectLabels)
                                                        {
                                                            <div class="saved-label-item" 
                                                                 @onclick="() => ApplyExistingLabel(task, label)"
                                                                 style="background-color: #@label.Color">
                                                                @label.Name
                                                                <span class="label-count">(@label.TodoCount)</span>
                                                                
                                                                @if (task.LabelText == label.Name)
                                                                {
                                                                    <button class="remove-label" @onclick:stopPropagation="true" 
                                                                            @onclick="() => RemoveLabel(task, label)">Ã—</button>

                                                                    <button class="delete-label" @onclick:stopPropagation="true" 
                                                                    @onclick="() => DeleteLabel(label)">Delete</button>
                                                                }

                                                            </div>
                                                        }
                                                    </div>
                                                }
                                                
                                                <div class="create-label-section">
                                                    <h6>Create New Label</h6>
                                                    <input type="text" @bind="TextValue" placeholder="Enter label name..." />
                                                    <div class="color-picker">
                                                        @foreach (var color in ColorOptions)
                                                        {
                                                            <div class="color-option @(SelectedColor == color ? "selected" : "")"
                                                                 style="background-color: #@color"
                                                                 @onclick="() => SelectColor(color)">
                                                            </div>
                                                        }
                                                    </div>
                                                    <button @onclick="() => CreateLabel(task)" class="create-label-button">
                                                        Create New Label
                                                    </button>
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
                @if (IsAddingTask && CurrentListAddingTask == todoList)
                {
                    <input type="text" @bind="TextValue" placeholder="Enter task name..." />
                    <button @onclick="() => CreateTask(todoList)">Create Task</button>
                }
                else
                {
                    <button @onclick="() => ShowInputField(todoList)">Add Task</button>
                }
            </div>
        }
    }
    <div class="todo-list-container">
        <button>Create new List</button>
    </div>
</div>

@code {
    [Parameter]
    public int ProjectId { get; set; }
    public required ProjectDto CurrentProject { get; set; }
    private List<LabelDto> ProjectLabels { get; set; } = new();
    private string SelectedColor { get; set; } = "4A90E2";
    private bool IsColorPickerVisible { get; set; } = false;
    private bool IsLabelVisible { get; set; } = false;
    
    private List<string> ColorOptions = new()
    {
        "4A90E2",  // Blue
        "50C878",  // Green
        "FF6B6B",  // Red
        "FFD93D",  // Yellow
        "8A2BE2",  // Purple
        "FF5733",  // Orange
        "33FFBD",  // Mint Green
        "FF33F6",  // Pink
        "33D4FF",  // Light Blue
        "FFC300",  // Gold
        "FF7F50",  // Coral
        "6A5ACD",  // Slate Blue
        "20B2AA",  // Light Sea Green
        "D2691E"   // Chocolate
    };

    private bool IsHandleLabel { get; set; } = false;
    private bool IsAddingTask { get; set; } = false;
    private bool IsModifiyingOpen { get; set; } = false;
    private TodoListDto CurrentListAddingTask { get; set; }
    private TodoItemDto CurrentTodoItem { get; set; }
    private string TextValue = "";
    private bool ViewTask { get; set; } = false;

    //hardcoded TODO List for testing
    private List<TodoItemDto> hobbyTasks = new List<TodoItemDto>{
        new () { Title = "Play football with friends", DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false},
        new TodoItemDto { Title = "Watch one piece", DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false},
        new TodoItemDto { Title = "Watch one piece", DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false}, 
    };

    protected override async Task OnInitializedAsync()
    {
        // Initialize project
        CurrentProject = new ProjectDto()
        {
            Id = ProjectId,
            Name = "Default-Project",
            TodoLists = new List<TodoListDto>
            {
                new()
                {
                    Name = "Hobby",
                    TodoItems = hobbyTasks
                },
                new ()
                {
                    Name = "School",
                    TodoItems = new List<TodoItemDto>
                    {
                        new TodoItemDto { Title = "Watch one piece", DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false}, 
                    }
                },
                new ()
                {
                    Name = "Reading",
                    TodoItems = new List<TodoItemDto>
                    {
                        new() { Title = "Watch one piece", DueDate = DateTime.Today, Description= "This is a very good description", Priority = "VeryLow", IsDone = false}, 
                    }
                }
            }
        };

        // Count existing labels
        foreach (var list in CurrentProject.TodoLists)
        {
            foreach (var item in list.TodoItems)
            {
                if (item.HasLabel)
                {
                    var label = ProjectLabels.FirstOrDefault(l => l.Name == item.LabelText);
                    if (label != null)
                    {
                        label.TodoCount++;
                    }
                }
            }
        }
    }

    private async Task ApplyExistingLabel(TodoItemDto todoItem, LabelDto label)
    {
        // Remove old label if exists
        if (todoItem.HasLabel)
        {
            var oldLabel = ProjectLabels.FirstOrDefault(l => l.Name == todoItem.LabelText);
            if (oldLabel != null)
            {
                oldLabel.TodoCount--;
            }
        }

        // Apply new label
        todoItem.LabelText = label.Name;
        todoItem.LabelColor = "#" + label.Color;
        todoItem.HasLabel = true;
        
        if (!todoItem.Labels.Contains(label.Name))
        {
            todoItem.Labels.Add(label.Name);
            label.TodoCount++;
        }
        
        todoItem.IsLabelEditorVisible = false;
        StateHasChanged();
    }

    private async Task CreateLabel(TodoItemDto todoItem)
    {
        if (!string.IsNullOrWhiteSpace(TextValue) && !string.IsNullOrWhiteSpace(SelectedColor))
        {
            // Check if label already exists
            if (ProjectLabels.Any(l => l.Name.Equals(TextValue, StringComparison.OrdinalIgnoreCase)))
            {
                // Could add error message here
                return;
            }

            var newLabel = new LabelDto
            {
                Name = TextValue,
                Color = SelectedColor,
                ProjectId = ProjectId,
                TodoCount = 0,
                Id = ProjectLabels.Count + 1 // Temporary ID generation
            };
            
            ProjectLabels.Add(newLabel);
            await ApplyExistingLabel(todoItem, newLabel);
            
            TextValue = "";
            SelectedColor = "4A90E2";
        }
    }

    private async Task RemoveLabel(TodoItemDto todoItem, LabelDto label)
    {
        todoItem.HasLabel = false;
        todoItem.LabelText = null;
        todoItem.LabelColor = "#FFFFFF";
        todoItem.Labels.Remove(label.Name);
        
        label.TodoCount--;
        
        StateHasChanged();
    }

    private void DeleteLabel(LabelDto label)
{
    ProjectLabels.Remove(label);

    // Remove the label from any tasks that have it assigned
    foreach (var list in CurrentProject.TodoLists)
    {
        foreach (var task in list.TodoItems)
        {
            if (task.LabelText == label.Name)
            {
                task.HasLabel = false;
                task.LabelText = null;
                task.LabelColor = "#FFFFFF"; // reset color
            }
        }
    }

    StateHasChanged();
}


    private void ShowInputField(TodoListDto todoList)
    {
        IsAddingTask = true;
        CurrentListAddingTask = todoList;
    }

    private void CreateTask(TodoListDto todoList)
    {
        if (string.IsNullOrEmpty(TextValue))
        {
            return;
        }

        var createTodoItemDto = new CreateTodoItemDto();
        createTodoItemDto.Title = TextValue;
        
        TextValue = "";
        IsAddingTask = false;
        CurrentListAddingTask = null;
    }

    private void HandleIsModifiyer(TodoItemDto todoItem)
    {
        CurrentTodoItem = CurrentTodoItem == todoItem ? null : todoItem;
    }

    private void ToggleLabelEditor(TodoItemDto todoItem)
    {
        IsHandleLabel = !IsHandleLabel;
    }

    private void SelectColor(string color)
    {
        SelectedColor = color;
        StateHasChanged();
    }
}
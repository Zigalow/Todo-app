@page "/"
@using Microsoft.AspNetCore.Authorization
@using Todo.Core.Dtos.ProjectDtos
@using Todo.Web.Services.interfaces
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IProjectService ProjectService

@attribute [Authorize]

<title>Projects</title>

<h1>My Projects</h1>

<div class="projects-container">
    @if (_projects == null)
    {
        <p class="project">loading...</p>
    }
    else if (!_projects.Any())
    {
        <p class="project">No project found</p>
    }
    else
    {
        @foreach (var project in _projects)
        {
            <div class="project" @onclick="() => NavigateToProject(project.Id)">
                <p class="project-name">@project.Name</p>
                <div class="project-dropdown-menu" @onclick:stopPropagation>
                    
                    <button class="project-dropdown-button" @onclick="() => DropdownMenu(project)">
                        <img src="images/menu.png" alt=""/>
                    </button>
                        @if (CurrentDropdownMenu == project)
                        {
                        <div class="project-dropdown">
                            <button>View project</button>
                               <button>Share project</button>
                            <button @onclick="() => DeleteProjectAsync(project.Id)">Delete todo-list</button>
                        </div>
                        } 
</div>
            </div>
        }
    }
    @if (IsAddingProject)
    {
    <div class="new-project">
        <input type="text" @bind="_newProjectName" placeholder="Project Name"/>
        <button @onclick="CreateProjectAsync">Create Project</button>
        <button @onclick="() => IsAddingProject = false">Cancel</button>
    </div>
    }
    else
    {
    <button class="new-project" @onclick="ShowInputProject">Create new project</button>
    }
    
</div>
@if (_showError)
{
<b class="error-message">
    @_errorMessage
</b>
}

@code {
    [Parameter] public bool IsAddingProject { get; set; }
    private string _newProjectName = ""; // Used too name the new project created
    private List<ProjectDto>? _projects;
    private bool _showError = false;
    private string _errorMessage = "";
    private ProjectDto? CurrentDropdownMenu { get; set; }
    
    // Get all the project for the given user
    protected override async Task OnInitializedAsync()
    {
        _projects = await ProjectService.GetAllProjectsAsync();
    }

    private async Task CreateProjectAsync()
    {
        if (string.IsNullOrEmpty(_newProjectName) || string.IsNullOrWhiteSpace(_newProjectName))
        {
            await ShowErrorMessage("Failed to create project. Please try again.");
            return;
        }

        // Create a new project DTO to send to the API
        var createProjectDto = new CreateProjectDto
        {
            Name = _newProjectName
        };

        // Create the project in the database
        var isCreated = await ProjectService.CreateProjectAsync(createProjectDto);
        if (isCreated)
        {
            //Load all projects again
            _projects = await ProjectService.GetAllProjectsAsync();
        }
        else
        {
            await ShowErrorMessage("Failed to create project. Please try again.");
        }

        _newProjectName = "";
        IsAddingProject = false;
    }

    private void NavigateToProject(int projectId)
    {
        Console.WriteLine($"Navigating to project {projectId}");
        NavigationManager.NavigateTo($"/project/{projectId}");
    }

    private void ShowInputProject()
    {
        IsAddingProject = true;
    }
    
    private async Task ShowErrorMessage(string message)
    {
        _errorMessage = message;
        _showError = true;

        await Task.Delay(1000);
        _errorMessage = "";
        _showError = false;
    }
    private void DropdownMenu(ProjectDto project)
    {
    CurrentDropdownMenu = CurrentDropdownMenu == project ? null : project;
    }

    private async Task DeleteProjectAsync(int projectId)
    {
        var isDeleted = await ProjectService.DeleteProjectAsync(projectId);

        if (isDeleted)
        {
            _projects = _projects.Where(p => p.Id != projectId).ToList();
        }
        else
        {
            await ShowErrorMessage("Failed to delete project. Please try again.");
        }
    }
    
}
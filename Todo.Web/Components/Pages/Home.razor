@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Todo.Core.Dtos.ProjectDtos
@using Todo.Core.Entities
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@inject UserManager<ApplicationUser> UserManager
@*@inject HttpClient Http*@
@inject IHttpClientFactory HttpClientFactory

@attribute [Authorize]

<title>Projects</title>

<h1>My Projects</h1>
@if (Projects == null)
{
<p>Loading...</p>
}

else
{

    <div class="projects-container">
        @foreach (var project in Projects)
        {
            <div class="project" @onclick="() => NavigateToProject(project.Id)">
                <p class="project-name">@project.Name</p>
            </div>
        }
        @if (IsAddingProject)
        {
            <div class="new-project">
                <input type="text" @bind="NewProjectName" placeholder="Project Name"/>
                <button @onclick="() => CreateProjectAsync()">Create Project</button>
                <button @onclick="() => IsAddingProject = false">Cancel</button>
            </div>
        }
        else
        {
            <button class="new-project" @onclick="() => ShowInputProject()">Create new project</button>
        }

    </div>
}

@code {
    [Parameter]
    public bool IsAddingProject {get; set;} = false;
    private string NewProjectName = "";

    public List<ProjectDto>? Projects
    /*{
        new ProjectDto { Id = 0, Name = "Default" },
        new ProjectDto { Id = 1, Name = "Test" },
        new ProjectDto { Id = 2, Name = "CSharp Course" },
        new ProjectDto { Id = 3, Name = "Test 2" },
        new ProjectDto { Id = 4, Name = "Test 3" }
    }*/;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("TodoApi"); // Create a client for TodoApi
            Projects = await client.GetFromJsonAsync<List<ProjectDto>>("api/projects");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching projects: {ex.Message}");
        }
    }

    private void CreateProject(){
        if(string.IsNullOrEmpty(NewProjectName) || string.IsNullOrWhiteSpace(NewProjectName)){
            return;
        }
        Projects?.Add(
            new ProjectDto {Id =6 ,Name = NewProjectName}
        );
        
        var createProjectDto = new CreateProjectDto();

        createProjectDto.Name = NewProjectName;

        /*
         * TODO: Use ProjectsController
         */
        
        
        NewProjectName = "";
        IsAddingProject = false;
        Console.WriteLine("Added a new project");
    }
    
    private async Task CreateProjectAsync()
    {
        if (string.IsNullOrEmpty(NewProjectName) || string.IsNullOrWhiteSpace(NewProjectName))
        {
            return;
        }

        // Create a new project DTO to send to the API
        var createProjectDto = new CreateProjectDto
        {
            Name = NewProjectName
        };

        try
        {
            // Send POST request to create a new project
            var client = HttpClientFactory.CreateClient("TodoApi");
            var response = await client.PostAsJsonAsync("api/projects", createProjectDto);

            if (response.IsSuccessStatusCode)
            {
                var newProject = await response.Content.ReadFromJsonAsync<ProjectDto>();
                Projects?.Add(newProject!); // Update the local list with the new project
                NewProjectName = "";
                IsAddingProject = false;
            }
            else
            {
                Console.WriteLine($"Error creating project: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception creating project: {ex.Message}");
        }
    }

    
    private string GetProjectLink(int projectId)
    {
        return $"/project/{projectId}";
    }
    
    private void NavigateToProject(int projectId)
    {
        Console.WriteLine($"Navigating to project {projectId}");
        NavigationManager.NavigateTo($"/project/{projectId}");
    }
    
    private void ShowInputProject(){
        IsAddingProject = true;
    }
}